# deployment/nginx.conf
# Nginx configuration for PDF Content Moderator

user nginx;
worker_processes auto;
error_log /var/log/nginx/error.log warn;
pid /var/run/nginx.pid;

# Load dynamic modules
include /usr/share/nginx/modules/*.conf;

events {
    worker_connections 1024;
    use epoll;
    multi_accept on;
}

http {
    # Basic settings
    include /etc/nginx/mime.types;
    default_type application/octet-stream;
    
    # Logging format
    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                   '$status $body_bytes_sent "$http_referer" '
                   '"$http_user_agent" "$http_x_forwarded_for" '
                   'rt=$request_time uct="$upstream_connect_time" '
                   'uht="$upstream_header_time" urt="$upstream_response_time"';
    
    access_log /var/log/nginx/access.log main;
    
    # Performance settings
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    types_hash_max_size 2048;
    
    # Security headers
    server_tokens off;
    add_header X-Frame-Options DENY always;
    add_header X-Content-Type-Options nosniff always;
    add_header X-XSS-Protection "1; mode=block" always;
    add_header Referrer-Policy "strict-origin-when-cross-origin" always;
    add_header Content-Security-Policy "default-src 'self'; script-src 'self' 'unsafe-inline' https://cdn.jsdelivr.net https://cdnjs.cloudflare.com; style-src 'self' 'unsafe-inline' https://cdn.jsdelivr.net https://cdnjs.cloudflare.com; img-src 'self' data: blob:; font-src 'self' https://cdnjs.cloudflare.com;" always;
    
    # Gzip compression
    gzip on;
    gzip_vary on;
    gzip_min_length 1000;
    gzip_proxied any;
    gzip_comp_level 6;
    gzip_types
        text/plain
        text/css
        text/xml
        text/javascript
        application/json
        application/javascript
        application/xml+rss
        application/atom+xml
        image/svg+xml;
    
    # File upload settings
    client_max_body_size 50M;
    client_body_buffer_size 128k;
    client_header_buffer_size 1k;
    large_client_header_buffers 4 4k;
    
    # Timeout settings
    client_body_timeout 12;
    client_header_timeout 12;
    keepalive_timeout 15;
    send_timeout 10;
    
    # Rate limiting
    limit_req_zone $binary_remote_addr zone=api:10m rate=10r/m;
    limit_req_zone $binary_remote_addr zone=upload:10m rate=5r/m;
    limit_req_zone $binary_remote_addr zone=general:10m rate=30r/m;
    
    # Connection limiting
    limit_conn_zone $binary_remote_addr zone=conn_limit_per_ip:10m;
    limit_conn conn_limit_per_ip 20;
    
    # Upstream backend servers
    upstream app_backend {
        least_conn;
        server app:8000 max_fails=3 fail_timeout=30s;
        # Add more app servers for load balancing
        # server app2:8000 max_fails=3 fail_timeout=30s;
        keepalive 32;
    }
    
    # Cache settings
    proxy_cache_path /var/cache/nginx levels=1:2 keys_zone=app_cache:10m 
                     max_size=1g inactive=60m use_temp_path=off;
    
    # Main server block
    server {
        listen 80;
        listen [::]:80;
        server_name _;
        
        # Security headers for HTTP
        add_header X-Frame-Options DENY always;
        add_header X-Content-Type-Options nosniff always;
        
        # Redirect HTTP to HTTPS in production
        # Uncomment for HTTPS setup
        # return 301 https://$server_name$request_uri;
        
        # Health check endpoint
        location /nginx-health {
            access_log off;
            return 200 "healthy\n";
            add_header Content-Type text/plain;
        }
        
        # Static files
        location /static/ {
            alias /app/static/;
            expires 1d;
            add_header Cache-Control "public, immutable";
            
            # Security for uploaded files
            location ~* \.(php|php[0-9]|phtml|cgi)$ {
                deny all;
            }
        }
        
        # API endpoints with rate limiting
        location /api/ {
            limit_req zone=api burst=20 nodelay;
            limit_req_status 429;
            
            # Upload endpoint with special limits
            location /api/upload {
                limit_req zone=upload burst=5 nodelay;
                client_max_body_size 50M;
                client_body_timeout 300s;
                proxy_read_timeout 300s;
                proxy_send_timeout 300s;
            }
            
            # Proxy to application
            proxy_pass http://app_backend;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # Timeouts
            proxy_connect_timeout 30s;
            proxy_send_timeout 60s;
            proxy_read_timeout 60s;
            
            # Buffering
            proxy_buffering on;
            proxy_buffer_size 4k;
            proxy_buffers 8 4k;
            proxy_busy_buffers_size 8k;
            
            # Cache API responses (selective)
            location ~* /api/(health|status) {
                proxy_cache app_cache;
                proxy_cache_valid 200 1m;
                proxy_cache_key "$request_uri";
                add_header X-Cache-Status $upstream_cache_status;
            }
        }
        
        # Download endpoints
        location /download/ {
            limit_req zone=general burst=10 nodelay;
            
            # Secure file downloads
            internal;
            alias /app/static/;
            
            # Set appropriate headers
            add_header Content-Disposition attachment;
            add_header X-Content-Type-Options nosniff;
        }
        
        # Report generation endpoints
        location /report/ {
            limit_req zone=general burst=5 nodelay;
            client_body_timeout 300s;
            proxy_read_timeout 300s;
            
            proxy_pass http://app_backend;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }
        
        # Main application
        location / {
            limit_req zone=general burst=20 nodelay;
            
            # Proxy to application
            proxy_pass http://app_backend;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # Timeouts
            proxy_connect_timeout 30s;
            proxy_send_timeout 60s;
            proxy_read_timeout 60s;
            
            # WebSocket support (if needed)
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
            
            # Error pages
            error_page 502 503 504 /50x.html;
        }
        
        # Error page
        location = /50x.html {
            root /usr/share/nginx/html;
        }
        
        # Deny access to sensitive files
        location ~ /\. {
            deny all;
            access_log off;
            log_not_found off;
        }
        
        location ~* \.(env|ini|conf|sql)$ {
            deny all;
            access_log off;
            log_not_found off;
        }
    }
    
    # HTTPS server block (for production with SSL)
    server {
        listen 443 ssl http2;
        listen [::]:443 ssl http2;
        server_name _;
        
        # SSL configuration
        ssl_certificate /etc/ssl/certs/server.crt;
        ssl_certificate_key /etc/ssl/certs/server.key;
        ssl_session_cache shared:SSL:1m;
        ssl_session_timeout 5m;
        ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384;
        ssl_protocols TLSv1.2 TLSv1.3;
        ssl_prefer_server_ciphers on;
        
        # HSTS
        add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;
        
        # All other configuration same as HTTP block
        # ... (copy from above)
        
        # Note: This server block is commented out by default
        # Enable when you have proper SSL certificates
    }
    
    # Monitoring endpoints (if using Prometheus)
    server {
        listen 9113;
        server_name _;
        
        location /metrics {
            # Add prometheus nginx exporter here
            # stub_status on;
            access_log off;
            allow 172.20.0.0/16;  # Docker network
            deny all;
        }
    }
}

# Stream block for TCP load balancing (if needed)
stream {
    # PostgreSQL load balancing
    upstream postgres_backend {
        server postgres:5432;
    }
    
    # Redis load balancing
    upstream redis_backend {
        server redis:6379;
    }
    
    # Note: Uncomment if you need TCP load balancing
    # server {
    #     listen 5432;
    #     proxy_pass postgres_backend;
    # }
}